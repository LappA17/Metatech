'use strict';

// здесь мы композируем наши асинхронные фции при помощи композа написанного на reduce
// мы можем перебирать при помощи цикла, рекурсии и редьюсеры к примеру

// здесь мы значение x должны в reduce передать уже обёрнутым в Промис - Promise.resolve(x)
// это сделанно для того что бы аккамулятор с самого начала тоже был Промисом, что бы мы могли на нено подписаться с помощью then
// и потом выполнить следующиую фцию которая приходит вторым аргументом в reduce
// и теперь из фции которая первым аргументом в массиве стоит тоже возвращается Промис и мы можем подписаться и Промис призодит в следующий вызов в аккаумялтор

const compose =
  (...fns) =>
  (x) =>
    fns.reduce((acc, f) => acc.then(f), Promise.resolve(x));

// Usage

const inc = async (x) => x + 1;
const twice = async (x) => x * 2;
const square = async (x) => x * x;

const f = compose(inc, twice, square, inc);

(async () => {
  const res = await f(7);
  console.dir({ res });
})();
