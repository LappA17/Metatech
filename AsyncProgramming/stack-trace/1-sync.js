'use strict';

const fs = require('node:fs');

//Проблема strack trace больше нас волнует в Ноде, потому что в браузере с ней очень редко сталкиваются, но вообще она может быть и там, а точнее везде где есть v8
//так же на стек трейс можем наткнуться используя фции имующие контракт с коллбеком или асинхроные фции или Промис.
//Решение данной проблемы появилось в 12 Ноде

//Здесь мы делаем обычные синхронные фции, вызывавя фцию f3() мы вызываем f2, а так f1 -> f1 уже вызывает таймаут и тут readFile происходит. То-есть у нас происходит синхронный вызов фций, и мы в try ловим ошибку и предпологаем что она попадёт в console.log('Catch', err); но конечно же мы ошибаемся и она туда не будет попадать
//Не будет попадать по двум причинам - во-первых setTimeout - асинхронный и readfile - асинхронный, то-есть у нас 2 раза будет очистка stack trace и эта ошибка НЕ будет ловиться

// Также мы специально не создали файл file.ext что бы получать ошибку и у Тимура в Ноде до этой ошибки даже не доходит но у меня эта ошибка появляется

//самое главное нужно понять две вещи, что в моей ноде код не смотря на setTimeout доходит до этой ошибки throw err а у Тимура дойдёт только если его setTimeout будет закомментирован. И второе - даже не смотря на то что мы получаем информацию о throw err; то единственно что нам приходит в этой ошибки это на какой линейке кода она была выкинута 1-sync.js:17, а кроме этого никакой последовательности мы не получили, те нет информации какая фция её выкинула, f1, f2 или f3 то-есть у нас нет никакого СТЕК ТРЕЙСА !

const f1 = () => {
  setTimeout(() => {
    fs.readFile('file.ext', (err) => {
      throw err;
    });
  }, 0);
};

const f2 = () => f1();
const f3 = () => f2();

try {
  f3();
} catch (err) {
  console.log('Catch', err);
}

/*
/Users/Ruslan/Desktop/Work/timur-shemsedinov/Async-Programming/stack-trace/1-sync.js:17
      throw err;
      ^

[Error: ENOENT: no such file or directory, open 'file.ext'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: 'file.ext'
}

    Важно помнить что у меня и у Тимура на момент записи его видео разные версии ноды, у него 10, у меня 18
    Мы не видим стектрейса, то-есть нам не поняно где произошла ошибка
    Но если мы закомментируем setTimeout то уже нам будет видно в какой последовательности вызывались фции и где произошла ошибка
*/
