'use strict';

// В этой второй реализации у нас будет много процессов, то-есть мы раздеребанили эти акторы из одного процесса и сложили в несколько. Несмотря на это мы почти не модифицировали сам код акторов, но теперь у акторо нет возможности вызывать методы друг друга или обращаться к общей памяти. В предыдущем примере мы теоритечески могли вызвать из одного актора другой, у них был общий глобал, то-есть можно было их как-то поместить в один сенд бокс и что-то там с ними делать
// Но находясь в одном процессе наши акторы могут его уронить и тогда все акторы уронятся вместе с приложениями, по-этому в этом примере мы будем форкать процессы

const ActorSystem = require('./system.js');

const EXIT_NORMAL = 1000;
const EXIT_ABNORMAL = 5000;

ActorSystem.start('Root');

process.on('SIGINT', () => {
  console.log('');
  ActorSystem.stop('Root');
  setTimeout(() => {
    console.log('Graceful shutdown');
    process.exit(0);
  }, EXIT_NORMAL);
  setTimeout(() => {
    console.log('Abnormal termination');
    process.exit(1);
  }, EXIT_ABNORMAL);
});

/*
  Если мы запустим node main.js то акторы стартанут немного в другом порядке, потому что это всё таки процессы и они стартуют медленей и Mailer может обогнать Renderer и Monitoring
  Потом в операционной системе мы можем посмотреть что у нас наплодились процессы
*/
