'use strict';

// Паттерн Открытый Конструктор будет нам необходим для того что бы лучше понять как работают Промисы и для того что бы построить и написать паттерн Future - это паттерн для работы с асинхроностью, но этот Future без состояния и многоразовый, те его можно кампозировать, это паттерн для работы с асинхроностью и парадигмы фционального программирования

// как мы можем передавать значение во внутрь фции ? 1) как констнтанту 2) как фция которая возвращает константу 3) как фцию которая принимает коллбек и коллбек возвращает константу

const scalarConstant = 5;
const functionConstant = () => 6;
const callbackConstant = (f) => f(7);

// внутри fn мы просто получаем выше наше значение из константы и фций

const fn = (x, f, g) => {
  console.dir({ x });
  console.dir({ y: f() });
  g((z) => {
    console.dir({ z });
  });
};

fn(scalarConstant, functionConstant, callbackConstant);

/*
{ x: 5 }
{ y: 6 }
{ z: 7 }
*/
