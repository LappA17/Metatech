'use strict';

//Мы уже говорили за коллбеки, промисы, асинк-евейты и часто в одном приложение все эти работы с асинхроностью нужно стыкавать в одном коде одного приложения, нужно обезпечивать совместимость между ними и контроль управления
//с помощью promisify мы можем фции возвращаеющие коллбек приобразовывать в Промисы, но так же можно Промисы приобразовывать в коллбек. Это можно делать при помощи обёртки, то-есть сделать фцию высшего порядко callbackify и туда передавать фцию которая будет возвращать Промис и она будет возвращать фцию которая возвращается с коллбеком
//точно так же можно приобразовывать синхронную фцию к асинхронной, но наоборот нельзя никаким образом, разве только вернуть из неё Промис

// Synchronous function to callback-last (от синхронной фции к фции с коллбеками)

//asyncify - это дважды вложенная лямбда, у нее в fn на вход идет синхронная фция и она возвращает фцию - те получается такая фция обертку, наружная фция fn создаёт замыкание, и в замыкание попадает две вещи: контекст наружной лямбды - fn и args - контекст внутренней лямбды
const asyncify =
  (fn) =>
  (...args) => {
    console.log('asyncify fn', fn); //сюда попадёт [Function: twice] и потом [Function: half]
    console.log('asyncify args', args); //а сюда [ 100, [Function (anonymous)] ] и потом asyncify args [ 200, [Function (anonymous)] ] где Function (anonymous) - это коллбек который мы ниже обрезаем
    const callback = args.pop(); //берёт последний элемент из аргументов нашего массива
    //setTimeout делаем для того что бы разорвать и отдать управление в евентлуп
    setTimeout(() => {
      //синхронная фция может свалиться наш с ошибкой
      try {
        //здесь мы фции fn передаём ОСТАВШИЕСЯ после pop аргументы с отрезанным коллбеком
        const result = fn(...args);
        //фция может внутри себя еще сделать ошибку, которую try catch не отловит
        if (result instanceof Error) callback(result);
        else callback(null, result);
      } catch (error) {
        callback(error);
      }
    }, 0);
  };

// Usage

//попробуем синхронную фцию приобразоввать к фции имеющию своим аргументом коллбек, которая возрвщает результат через коллбек
const twice = (x) => x * 2;
const twiceAsync = asyncify(twice);

const half = (x) => x / 2;
const halfAsync = asyncify(half);

const result = half(twice(100)); //это обычный синхронный вызов
console.dir({ sync: result }); //здесь получим сто

twiceAsync(100, (e, value) => {
  halfAsync(value, (e, result) => {
    console.dir({ asyncified: result });
  });
});
