'use strict';

// initial - это начальное число с которого мы начинаем суммирование

const adder = (initial) => {
  let value = initial;
  const add = (delta) => {
    value += delta;
    // у нас add - это сама фция, и фция может увидеть поля самой себя
    if (value >= add.maxValue) add.maxEvent(value);
    return add; // фция из себя возвращает ссылку на саму себя - рекурсия
  };
  // event - это тоже самое что лисенер или коллбек, мы могли бы по разному его назвать
  add.max = (max, event) => {
    add.maxValue = max;
    add.maxEvent = event;
    return add;
  };
  return add;
  // у нас везде три раза возвращается фция add. У нас во-первых у фции adder создается замыкание, у которой будет хранится значение, которое будет постоянно либо нарасчитываться либо уменьшатсья
};

// Usage

// как только фция adder в замыкание дойдёт до 100 то отработает этот консоль лог
const maxReached = (value) => {
  console.log('max value reached, value: ' + value);
};

const a1 = adder(10).max(100, maxReached)(-12); // мы сначало кладём 10 и говорим что когда дойдёт до 100, то вызови нам фци maxReached и потому -12 что бы у 10 отняло 12. Таким образом у нас в а1 вернется -2 и она будет фционального типа !

a1(25);
a1(50);
a1(75);
a1(100);
a1(-200)(50)(30);

// таким образом мы воспользовались всеми плюсами ооп не написав не одного класса, те у нас внутри хранится ссылка благодаря замыканиям
