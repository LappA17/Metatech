'use strict';

// О функции в программирование можно думать как об абстракции - это какой-то код который может исполнять похожие вещи в зависимости от аргументо, нам в этом помогает замыкание, лямбды и коррирование

// Ниже в примере у нас функция логорифм, которую мы сделали из имеющееся в js Math.log()
// Так как у нас фция принимает два аргумента (base, n) то мы можем с неё порадить более абстрактные вещи

const { log: ln } = Math;
const log = (base, n) => ln(n) / ln(base); // мы делим Лагарифм числа на Лагарифм основания. Мы здесь делаем из более конкретной функции более абстрактную

// эта фция ниже умеет из более асбтрактной функции порождать более конкретные

const createLog = (base) => (n) => log(base, n); // делаем две вложенные лямбды, первая лямбда берет (base) - те по какому основанию делать лагарифм, а вторая лямбда (n) берёт само число

// Usage

// 10ка или число Е ниже попадают в первый аргумен под base и дальше в createLog после передачи первого аргумента у нас возвращается фция, которая уже замкнута на первый аргумент и нам что бы вычеслить лагорифм нужно два раза вызвать фцию(если лямбда двойной вложености то нужно два раза вызвать и мы в lg(5) ln(5) это делаем)
{
  const lg = createLog(10); // применения для 10
  const ln = createLog(Math.E); // здесь применение для натурального лагорифа по числу E

  console.log('lg(5) =', lg(5));
  console.log('ln(5) =', ln(5));
}

/*
  Здесь у нас в примере получилось некого рода функциональное наследование - мы от более конкретной фции const log сделали более абстрактную const createLog 
  Потом унаследовали две других const lg , const ln и выучеслили
*/
