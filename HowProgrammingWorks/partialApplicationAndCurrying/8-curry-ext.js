'use strict';

// Здесь мы её еще улучшим чем в 7 примере

// В отличие от 7 примера, здесь у неё меньше сравнений и операций. В предыдущем примере у нас одна лямбда сразу шла из другой. Здесь же мы присвоили лямбду в переменную const curried = (...args)

const curry = (fn, ...par) => {
  const curried = (...args) =>
    fn.length > args.length ? curry(fn.bind(null, ...args)) : fn(...args);
  return par.length ? curried(...par) : curried; // здесь мы проверяем или в вызове самого каррирование кто-то передал какие-то аргументы. К примеру const f = curry(sum4, 1); сюда в карри передали еще 1цу, те мы выполняем частичное применение, к фции sum4 должно частично применится на место аргумента А подставится 1 и вернется фция уже коррированная с остатком в три аргумента
  // И в нашем примере в зависимости от того передаём ли мы какие-то аргументы в curyr будет либо сразу возврашать эту коррированную фцию : curried или вызывать эту коррированную фцию с аргументами ...par
  // таким образом мы пропускаем один шаг рекурсии, что освобождает нам в стеке одну позицию
};

// Usage

const sum4 = (a, b, c, d) => a + b + c + d;

const f = curry(sum4);
const y1 = sum4(1, 2, 3, 4);
const y2 = f(1, 2, 3, 4);
const y3 = f(1, 2, 3)(4);
const y4 = f(1, 2)(3)(4);
const y5 = f(1)(2)(3)(4);
const y6 = f(1)(2, 3, 4);
const y7 = f(1)(2)(3, 4);
const y8 = f(1, 2)(3, 4);
console.log(y1, y2, y3, y4, y5, y6, y7, y8);
