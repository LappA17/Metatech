'use strict';

// здесь мы разберём как напистаь коррирование попроще
// на вход точно так же передаётся фция fn
// дальше из неё, из curry, все что от (..args) и до самого конца фции возвращается уже коррированная фция
// так как в наружней лямбде больше никаких операция не происходит, то мы можем без return сразу вернуть, те из первой лямбда сразу вторая возвращается
// если переданно аргументов достаточно то мы сразу идем в else и вызываем fn со всеми аргументами
// а если длина фции больше то мы производим частичное применение const f = fn.bind(null, ...args); то-есть мы фции fn которая к нам пришла через bind закрепляем ней nое кство аргументов(те сколько нам аргументов передали столько и закрепим, тем самым нам не нужно знать кство аргументов)
// и дальше рекурсивно заново вызываем пока не попадём в else

const curry =
  (fn) =>
  (...args) => {
    if (fn.length > args.length) {
      const f = fn.bind(null, ...args);
      return curry(f);
    } else {
      return fn(...args);
    }
  };

// Usage

const sum4 = (a, b, c, d) => a + b + c + d;

// Самое важное что фция curry будет работать с абсолютно всеми фция(хоть лагорифами, хоть рендер страниц, хоть фции по работе с файлами и так далее)
// То-есть мы можем ее использовать везде где нам нужно на каком-то этапе закрепить како-то кство аругментов и чуть позже её где-то там использовать !

const f = curry(sum4); // сначала коррируем фцию sum и потом разными способами ее вызываем
const y1 = sum4(1, 2, 3, 4);
const y2 = f(1, 2, 3, 4);
const y3 = f(1, 2, 3)(4);
const y4 = f(1, 2)(3)(4);
const y5 = f(1)(2)(3)(4);
const y6 = f(1)(2, 3, 4);
const y7 = f(1)(2)(3, 4);
const y8 = f(1, 2)(3, 4);
console.log(y1, y2, y3, y4, y5, y6, y7, y8); // все 10
